substitutions:
  devicename: opentherm
  upper_devicename: Opentherm

esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini
  platformio_options:
    lib_deps: 
    - ihormelnyk/OpenTherm Library @ 1.1.3
  includes:
    - esphome-opentherm/

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${devicename} Fallback"
    password: !secret esphome_fallback_password

captive_portal:
logger:
api:
ota:

dallas:
  - pin: 14

custom_component:
  - lambda: |-
      auto opentherm = new OpenthermComponent();
      return {opentherm};
    
    components:
      - id: opentherm
output:
  - platform: custom
    type: float
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) opentherm;
      auto thermostat_modulation = new OpenthermFloatOutput();
      openthermComp->setThermostatModulation(thermostat_modulation);
      App.register_component(thermostat_modulation);
      return {thermostat_modulation};
    outputs:
      id: thermostat_modulation

sensor:
  - platform: dallas
    address:
    name: "Room where the boiler is temperature"
    
  - platform: wifi_signal
    name: "Opentherm Wi-Fi RSSI"
    unit_of_measurement: "dBm"
    update_interval: 30s
    
  - platform: uptime
    name: Opentherm uptime

  - platform: custom
    lambda: |-    
      OpenthermComponent *openthermComp = (OpenthermComponent*) opentherm;
      return { 
        openthermComp->outside_temperature_sensor, 
        openthermComp->return_temperature_sensor, 
        openthermComp->boiler_pressure_sensor,
        openthermComp->boiler_modulation_sensor,
        openthermComp->central_heating_actual_temperature_sensor,
        openthermComp->central_heating_target_temperature_sensor
      };
    sensors:
    - name: "Outside Temperature"
      unit_of_measurement: °C
      accuracy_decimals: 0
      device_class: temperature
      icon: "mdi:sun-thermometer-outline"
    - name: "Return Temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
      device_class: temperature
      icon: "mdi:water-sync"
    - name: "Boiler Pressure"
      unit_of_measurement: hPa
      accuracy_decimals: 1
      device_class: pressure
      icon: "mdi:hydraulic-oil-level"
    - name: "Boiler Modulation"
      unit_of_measurement: "%"
      accuracy_decimals: 0
      device_class: power_factor
      icon: "mdi:chart-bell-curve-cumulative"
    - name: "Central Heating Actual Temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
      device_class: temperature
      icon: "mdi:water-boiler"
    - name: "Central Heating Target Temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
      device_class: temperature
      icon: "mdi:thermostat"
      
  - platform: homeassistant
    id: temperature_sensor
    entity_id: sensor.temperature_sensor
    name: "Room temperature"
    unit_of_measurement: °C
    device_class: temperature

  - platform: pid
    name: "Modulating Thermostat PID Result"
    type: RESULT
    icon: "mdi:vector-curve"
    disabled_by_default: true
  - platform: pid
    name: "Modulating Thermostat PID HEAT"
    type: HEAT
    icon: "mdi:vector-curve"
    disabled_by_default: true
  - platform: pid
    name: "Modulating Thermostat PID ERROR"
    type: ERROR
    icon: "mdi:vector-curve"
    disabled_by_default: true   

binary_sensor:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) opentherm;
      return {openthermComp->boiler_flame_sensor};
    binary_sensors:
    - name: "Boiler flame"

switch:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) opentherm;
      return {openthermComp->modulating_thermostat_switch};
    switches:
      name: "Modulating thermostat enabled"
      icon: "mdi:vector-curve"
  - platform: template
    name: "Modulating Thermostat Autotune"
    turn_on_action:
      - climate.pid.autotune: modulating_thermostat     

button:
  - platform: restart
    name: "Opentherm restart"

climate:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) opentherm;
      return {
        openthermComp->domestic_hot_water_climate, 
        openthermComp->central_heating_climate
      };
    climates:
      - id: domestic_hot_water
        name: "Domestic Hot Water"
      - id: central_heating
        name: "Central Heating"
  - platform: pid
    id: modulating_thermostat
    name: "Modulating thermostat"
    visual:
      min_temperature: 16 °C
      max_temperature: 28 °C
      temperature_step: 0.5 °C
    sensor: temperature_sensor
    default_target_temperature: 20°C
    heat_output: thermostat_modulation
    control_parameters:
      kp: 0.38197
      ki: 0.01012
      kd: 3.60387
